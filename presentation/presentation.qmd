---
title: "Introduction to Julia workshop"
# subtitle: "How I Learned To Stop Worrying and Love Programming."
format: 
    julia-revealjs:
        slide-number: true
        # logo: figures/api_logo_big_black.png
        footer: API, January 2025
        transition: none
# jupyter: julia-1.11
# execute: 
#   cache: true
---

# Before we start!

1. If you don't have Julia installed: download `juliaup` from [https://github.com/JuliaLang/juliaup](https://github.com/JuliaLang/juliaup)

2. Clone the workshop repository to your computer:
    - [https://github.com/casparwb/IntroductionToJulia-API-2025](https://github.com/casparwb/IntroductionToJulia-API-2025)
3. In the root of the repository directory, run in your terminal

`> julia install_and_compile.jl`

    - Will download, install, and compile the dependencies. 
    - Might take a few minutes.


# Who am I?

## ... and who am I to organize this workshop?

- Came across Julia in 2018 - perfect timing!
- One language that can do all
- Used Julia for most of my classes
    - At least those where the professor let me use it
- Used it for my MSc thesis
- Currently using it for my PhD work

# The Julia programming language

![](julia-logo.png){width=5%  fig-align="center"}

## In a nutshell
A dynamic, general-purpose programming language designed to be both accessible and fast.

::: {.fragment}
- Born at MIT in 2009, first release in 2011.
    - Jeff Bezanson, Stefan Karpinski, Viral B. Shah, Alan Edelman
:::

::: {.fragment}
- Version 1.0 released in 2018
:::

::: {.fragment}
- Still very actively developed, current version v1.11, with v1.12 on the horizon.
:::


## Core features

::: {.fragment .fade-in-then-semi-out}
- Inherently fast and easy to optimize 
:::

::: {.fragment .fade-in-then-semi-out}
- Built-in package manager and general registry
:::

::: {.fragment .fade-in-then-semi-out}
- Virtual environments
:::

::: {.fragment .fade-in-then-semi-out}
- Intuitive and math-like syntax
:::

::: {.fragment .fade-in-then-semi-out}
- Composable: seperate parts work together
:::

::: {.fragment .fade-in-then-semi-out}
- Free and open source
:::

## Other features

:::: {.columns}

::: {.column width="45%"}
- Easy parallelism 
- Call C and Fortran functions natively
- Easy to call Python code
- Automatic differentiation
:::

::: {.column width="45%"}
- Automically generate efficient, specialized code
- Metaprogramming - code that returns code
- Unicode support
- Automated memory management
:::

::::


## How is Julia

::: {.fragment .fade-in-then-semi-out}
- Julia is a JIT (**J**ust **I**n **T**ime)-compiled language
:::

::: {.fragment .fade-in-then-semi-out}
- Dynamically typed, with option to declare types
:::

::: {.fragment .fade-in-then-semi-out}
- Interactive
:::

# What's bad about Julia?

## What's bad about Julia? {.smaller}

<!-- :::: {.columns} -->

<!-- ::: {.incremental} -->
::: {.fragment .fade-in-then-semi-out}
- Startup latency
    - Time To First X (TTFX)
        - Getting better every year
    - Precompiling new packages
:::

::: {.fragment .fade-in-then-semi-out}
- Easy to learn, hard to master (like baking bread!)
    - Many new concepts, eg. multiple dispatch, metaprogramming
:::

::: {.fragment .fade-in-then-semi-out}
- ~~No small binaries~~ This is soon possible.
:::

::: {.fragment .fade-in-then-semi-out}
- Unintuitive workflow/file dependency
:::

# This workshop
::: {.fragment .fade-in-then-semi-out}
- Aimed at people with zero experience in Julia.
:::

::: {.fragment .fade-in-then-semi-out}
- Will cover:
    - Basic fundamentals: variables, functions, string manipulation, etc...
    - More advanced fundamentals: the type system, multiple dispatch, performance considerations.
:::

::: {.fragment .fade-in-then-semi-out}
- A taste of the Julia ecosystem
:::

## Workshop content

![](survey.png){width="80%"}


## Workshop contents

- A taste of the Julia ecosystem
    - Plotting
    - Tabular data analysis
    - (Ordinary) differential equations
    - Mathematical optimization
    - Probability distributions
    - Calling Python in Julia
    - Multithreading


## Structure of the workshop

::: {.incremental}
- Notebooks with theory, examples, code, and exercises
- Four fundamental notebooks
    - basics (1), plotting (2), multiple dispatch (3), performance (4)
    - Everyone should do (1) and (2), recommend (2) and (3)
- Six notebooks covering a few packages in the Julia ecosystem.
- You can prioritize which you want to do.
:::

## Organizational

- Have a question? Write your name on the board.
- Make use of package documentation. 
- Won't get through everything.
    - Most important is the basics
- Feel free to use the resources in this repository.


# A taste of the ecosystem

## DifferentialEquations.jl

::: {.incremental}
- A huge package for solving differential equations (DEs)
- Support for
    - Ordinary DEs, split ODEs, stochastic ODEs, differential algebraic equations (DAEs), delay DEs, many more
- One of, if not the fastest DE solver in any language
- Supports GPU acceleration
- Automatic differentiation
- Arbitrary precision arithmetic
:::

## DifferentialEquations.jl
::: {.incremental}
- You never need all the functionality
- Takes a long time to precompile
- Package is split into sub-packagse
- Ordinary differential equations: OrdinaryDiffEq.jl
- Still a big package, contains on the order [100s of solvers](https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/)
- Also split into sub-packages for different solvers
:::

## DataFrames.jl
- Julia package for working with tabular data
- Similar design to pandas
- Well integrated into the Julia ecosystem
- Fast, multithreaded
- Intuitive syntax 
- Feature rich

## 

## Resources

- [The offical Julia website](https://julialang.org/)
- [Astronomy packages for Julia](https://juliaastro.org/dev/index.html)
- [Julia workflows: best practices](https://modernjuliaworkflows.org/)
- [The official Julia documentation](https://docs.julialang.org/en/v1/)
- [The Julia discourse](discourse.julialang.org)
- [The Julia slack](julialang.slack.com)
- [CUDA in Julia](https://cuda.juliagpu.org/stable/)
- [Julia on HPC](https://github.com/JuliaParallel/JUHPC)

## Package selection

<!-- :::: {.columns} -->

<!-- ::: {.column width="45%"} -->
- Astronomy -> [JuliaAstro](https://juliaastro.org/dev/)
- Plotting -> [Makie](https://docs.makie.org/v0.22/), [Plots](https://docs.juliaplots.org/latest/tutorial/)
- Linear systems/ least squares -> [LinearSolve](https://docs.sciml.ai/LinearSolve/dev/)
- Sparse arrays -> [SparseArrays](https://docs.julialang.org/en/v1/stdlib/SparseArrays/#Sparse-Arraysz)
- Interpolation -> [DataInterpolations](https://github.com/PumasAI/DataInterpolations.jl), [Interpolations](https://juliamath.github.io/Interpolations.jl/latest/)
- Polynomial roots -> [Polynomials](https://juliamath.github.io/Polynomials.jl/stable/#Root-finding-1)
- Rootfinding -> [NonlinearSolve](https://nonlinearsolve.sciml.ai/)
- Finite difference -> [FiniteDifference](https://juliadiff.org/FiniteDifferences.jl/latest/), [FiniteDiff](https://github.com/JuliaDiff/FiniteDiff.jl)

## Package selection

- Integration -> [Integrals](https://integrals.sciml.ai/), [QuadGK](https://juliamath.github.io/QuadGK.jl/stable/)
- Optimization -> [Optimization](https://docs.sciml.ai/Optimization/stable/)
- Differential equations -> [DifferentialEquations](https://diffeq.sciml.ai/)
- Automatic differentiation -> [DifferentiationInterface](https://juliadiff.org/DifferentiationInterface.jl/DifferentiationInterface/stable/)
- Fast Fourier Transform -> [FFTW](https://github.com/JuliaMath/FFTW.jl)
- Symbolic CAS ->[Symbolics](https://symbolics.juliasymbolics.org/dev/)
- Units -> [Unitful](https://painterqubits.github.io/Unitful.jl/stable/)
- Bayesian inference -> [Turing](https://turinglang.org/)

#
 See more at the [SciML website](https://docs.sciml.ai/Overview/stable/overview/#Overview-of-Computational-Science-in-Julia-with-SciML)
<!-- ::: -->

<!-- ::: {.column width="45%"} -->
<!-- Plots, Makie -->
<!-- Test -->
<!-- ::: -->
<!-- :::: -->

# Examples

## CUDA

```{.julia}
using CUDA

N = 1e6
A = CUDA.fill(1.0f0, N)
B = CUDA.fill(1.0f0, N)

C = A .+ B
```

## Stellar evolution

```{.julia}
abstract type StellarType
struct MainSequence <: StellarType end
struct RedGiant     <: StellarType end

struct Star{T, tT <: StellarType}
    M::T
    L::T
    R::T
    stellar_type::tT
end
    

function stellar_winds(star::Star{T, tT}) where tT <: MainSequence
    return a_wind_prescription(star.M)
end

function stellar_winds(star::Star{T, tT}) where tT <: RedGiant
    return a_different_wind_prescription(star.M, star.L)
end
```

## N-body collision

```{.julia}
abstract type StellarType
struct MainSequence <: StellarType end
struct BlackHole     <: StellarType end

struct Star{T, tT <: StellarType}
    M::T
    L::T
    R::T
    stellar_type::tT
end
    
check_collision(body1::Star{T, tT <: MainSequence}, body2::Star{T, tT <: MainSequence}) = ...
check_collision(body1::Star{T, tT <: MainSequence}, body2::Star{T, tT <: BlackHole})    = ...
check_collision(body1::Star{T, tT <: BlackHole},    body2::Star{T, tT <: BlackHole})    = ...
```

## Unicode

![](pn1.png){width=60%}


```{.julia}
r̄ = r̄₁ - r̄₂
v̄ = v̄₁ - v̄₂
r = norm(r̄) # r₁₂
r⁻¹ = 1/r
n = r̄*r⁻¹
v₁v₂ = dot(v̄₁, v̄₂) 
nv₁ = dot(n, v̄₁)
nv₂ = dot(n, v̄₂)
Gr⁻¹ = G*r⁻¹
Gr⁻² = Gr⁻¹*r⁻¹

# PN-1 acceleration
ai = @. n*(Gr⁻²*m₂)*(5*Gr⁻¹*m₁ + 4*Gr⁻¹*m₂ + 3/2*nv₂^2 - v₁² + 4*v₁v₂ - 2*v₂²) +
        (4*nv₁ - 3*nv₂)*v̄
```


